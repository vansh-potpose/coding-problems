/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* helper(vector<int>& preorder, vector<int>& inorder,int& idx,int start,int end,unordered_map<int,int>& mp){
        if(start>end){
            return nullptr;
        }
        int i=mp[preorder[idx]];
        TreeNode* root=new TreeNode(preorder[idx]);
        idx++;
        root->left = helper(preorder,inorder,idx,start,i-1,mp);
        root->right = helper(preorder,inorder,idx,i+1,end,mp);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = preorder.size();
        unordered_map<int,int> mp;
        for(int i=0;i<n;i++){
            mp[inorder[i]] = i;
        }
        int idx = 0;
        return helper(preorder,inorder,idx,0,n-1,mp);
    }
};
