class Solution {
public:
    int numDecodings(string s) {
        if (s.empty() || s[0] == '0') return 0; 

        int n = s.size();
        vector<int> dp(n + 1, 0); // dp[i] = number of ways to decode up to index i
        dp[0] = 1; // Empty string has one way to decode
        dp[1] = 1; // Single character (not '0') has one way to decode

        for (int i = 2; i <= n; ++i) {
            int singleDigit = s[i - 1] - '0';
            int twoDigits = (s[i - 2] - '0') * 10 + singleDigit;

            if (singleDigit >= 1) {
                dp[i] += dp[i - 1];
            }

            if (twoDigits >= 10 && twoDigits <= 26) {
                dp[i] += dp[i - 2];
            }
        }
        
        return dp[n];
    }
};
