class Solution {
public:
    unordered_map<string, int> mp;
    vector<vector<string>> ans;
    string b;

    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        
        b = beginWord;
        queue<string> q;
        unordered_set<string> st(wordList.begin(), wordList.end());
        st.erase(beginWord);
        q.push({beginWord});
        mp[beginWord] = 1; 

        int sz = beginWord.size();

        while(!q.empty()){
            
            string curr = q.front();
            q.pop();
            int step = mp[curr];
            if(curr == endWord) break;
            for(int i = 0; i < sz; i++){
                char original = curr[i];
                for(char c = 'a'; c <= 'z'; c++){
                    curr[i] = c;
                    if(st.count(curr)){
                        q.push(curr);
                        st.erase(curr);
                        mp[curr] = step + 1;
                    }
                }

                curr[i] = original;
            }
        }

        if(mp.find(endWord) != mp.end()){
            vector<string> seq;
            seq.push_back(endWord);
            dfs(endWord, seq);
        }

        return ans;
    }

    void dfs(string word, vector<string>& seq){
        if(b == word){
            reverse(seq.begin(), seq.end());
            ans.push_back(seq);
            reverse(seq.begin(), seq.end());
            return;
        }
        int steps = mp[word];
        int sz = word.size();
        for(int i = 0; i < sz; i++){
                char original = word[i];
                for(char c = 'a'; c <= 'z'; c++){
                    word[i] = c;
                    if(mp.find(word) != mp.end() && mp[word] + 1 == steps){
                        seq.push_back(word);
                        dfs(word, seq);
                        seq.pop_back();
                    }
                }
                word[i] = original;
            }
    }
};
