/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool check(TreeNode* root,TreeNode* min,TreeNode* max) {
        if(root==NULL){
            return true;
        }
        if(root->val<min->val){
            swap(root->val, min->val);
            return false;
        }
        if(root->val>max->val){
            swap(root->val, max->val);
            return false;
        }
        return check(root->left,min,root) && check(root->right,root,max);
    }

  bool checkit(TreeNode* root,long min,long max) {
        if(root==NULL){
            return true;
        }
        if(root->val<=min || root->val>=max){
            return false;
        }
        return checkit(root->left,min,root->val) && checkit(root->right,root->val,max);
    }
    void recoverTree(TreeNode* root) {
        TreeNode* min=new TreeNode(INT_MIN);
        TreeNode* max=new TreeNode(INT_MAX);
        long m1=LONG_MIN,m2=LONG_MAX;
        while(!checkit(root,m1,m2)){
            check(root,min,max);
        }
        
    }
};
