class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int total = nums1.size() + nums2.size();
        int half = total / 2;

        
        if (nums1.size() > nums2.size()) {
            nums1.swap(nums2);
        }

        int l = 0, r = nums1.size(); 
        while (l <= r) {
            int mid1 = (l + r) / 2;
            int mid2 = half - mid1;

            // Handle boundaries
            int Aleft = (mid1 > 0) ? nums1[mid1 - 1] : INT_MIN;
            int Aright = (mid1 < nums1.size()) ? nums1[mid1] : INT_MAX;
            int Bleft = (mid2 > 0) ? nums2[mid2 - 1] : INT_MIN;
            int Bright = (mid2 < nums2.size()) ? nums2[mid2] : INT_MAX;

           
            if (Aleft <= Bright && Bleft <= Aright) {
                
                if (total % 2 == 0) {
                    return (max(Aleft, Bleft) + min(Aright, Bright)) / 2.0;
                }
                return min(Aright, Bright);
            } else if (Aleft > Bright) {
                
                r = mid1 - 1;
            } else {
                l = mid1 + 1;
            }
        }

        return 0.0;
    }
};
