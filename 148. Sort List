/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* findmid(ListNode* head){
         ListNode* slow = head;
        ListNode* fast = head;
        ListNode* prev = nullptr;

        while (fast != nullptr && fast->next != nullptr) {
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }

        return prev; 
    }

    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next == NULL){
            return head;
        }
        ListNode* mid = findmid(head);

        ListNode* left = head;
        ListNode* right = mid->next;
        mid->next = NULL;

        left=sortList(left);
        right=sortList(right);

        ListNode* result=merge(left,right);

        return result;
    }


    ListNode* merge(ListNode* list1, ListNode* list2){
       if(list1 == NULL) return list2;
       if(list2 == NULL) return list1;
       ListNode* mergedHead = NULL;
        if (list1->val < list2->val) {
            mergedHead = list1;
            list1 = list1->next;
        } else {
            mergedHead = list2;
            list2 = list2->next;
        }
        ListNode* temp = mergedHead;
       while(list1 != NULL && list2 != NULL){
        if(list1->val < list2->val){
            temp->next = list1;
            temp=list1;
            list1 = list1->next;
        }
        else{
            temp->next=list2;
            temp=list2;
            list2=list2->next;
        }
       }
       if (list1 != NULL) {
            temp->next = list1;
        } else {
            temp->next = list2;
        }
       return mergedHead;
    }
};
