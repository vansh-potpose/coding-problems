/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */

class NestedIterator {
public:
    queue<int> result;
    NestedIterator(vector<NestedInteger> &nestedList) {
        result=getElements(nestedList);
    }

    queue<int> getElements(vector<NestedInteger> &nestedList){
        queue<int> n;
        for(auto i:nestedList){
            if(i.isInteger()){
                n.push(i.getInteger());
            }else{
                queue<int> temp=getElements(i.getList());
                while (!temp.empty()) {
                    n.push(temp.front());  
                    temp.pop();  
                }

            }
        }
        return n;
    }
    
    int next() {
        int temp=result.front();
        result.pop();
        return temp;
    }
    
    bool hasNext() {
        return !result.empty();
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
