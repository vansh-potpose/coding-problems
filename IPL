#include <bits/stdc++.h>
using namespace std;

const long long mod = 1e9 + 7; // Constant for modulo operation
const long long inf = 1e18;    // A large number representing infinity

int main()
{
    
    int n; // Number of fees
    cin >> n; // Read the number of fees

    vector<int> fees(n); // Create a vector to store fees
    for (int i = 0; i < n; i++)
        cin >> fees[i]; // Read each fee

    // Special cases for 1 or 2 fees
    if (n == 1) {
        cout << fees[0] << '\n'; // Only one fee, output it
        return 0;
    }

    if (n == 2) {
        cout << fees[0] + fees[1] << '\n'; // Sum of two fees
        return 0;
    }

    vector<vector<int>> dp(n, vector<int>(3)); // Create a 2D vector for dynamic programming

    // Initialize the base cases for dp
    dp[0][1] = dp[0][2] = fees[0]; 
    dp[1][0] = fees[0];
    dp[1][1] = fees[1];
    dp[1][2] = fees[0] + fees[1];

    // Fill the dp table
    for (int i = 2; i < n; i++) {
        // Max sum if we don't choose fees[i]
        dp[i][0] = max({dp[i - 1][0], dp[i - 1][1], dp[i - 1][2]});
        // Max sum if we choose fees[i] but not fees[i - 1]
        dp[i][1] = fees[i] + dp[i - 1][0];
        // Max sum if we choose fees[i] and fees[i - 1] but not fees[i - 2]
        dp[i][2] = fees[i] + fees[i - 1] + dp[i - 2][0];
    }

    // Output the maximum sum possible
    cout << max({dp[n - 1][0], dp[n - 1][1], dp[n - 1][2]}) << '\n';
    return 0;
}
