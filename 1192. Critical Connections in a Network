class Solution {
public:
    vector<vector<int>> result;
    vector<int> disc, low;
    int time = 0;

    void dfs(int u, int parent, vector<vector<int>>& graph) {
        disc[u] = low[u] = ++time;

        for (int v : graph[u]) {
            if (v == parent) continue; 
            
            if (disc[v] == -1) { 
                dfs(v, u, graph);
                low[u] = min(low[u], low[v]); 

                if (low[v] > disc[u]) { 
                    result.push_back({u, v});
                }
            } else {
                low[u] = min(low[u], disc[v]); 
            }
        }
    }

    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<vector<int>> graph(n);
        disc.assign(n, -1);
        low.assign(n, -1);

        for (auto& edge : connections) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }

        for (int i = 0; i < n; i++) {
            if (disc[i] == -1) {
                dfs(i, -1, graph);
            }
        }

        return result;
    }
};
