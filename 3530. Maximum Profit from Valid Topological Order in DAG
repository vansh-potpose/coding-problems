class Solution {
public:
    int maxProfit(int n, vector<vector<int>>& edges, vector<int>& score) {
        vector<int> prereq(n,0);
        for(auto& edge : edges){
            prereq[edge[1]]|=(1<<edge[0]);
        }
        auto xovrendali=make_pair(edges,score);

        int full = (1<<n);
        vector<long long> dp(full,-1e18);
        dp[0]=0;

        for(int mask=0;mask<full;mask++){
            int position = __builtin_popcount(mask)+1;

            for(int i=0;i<n;i++){
                if((mask>>i)&1)continue;

                if((prereq[i]& mask)==prereq[i]){
                    int nextMask = mask | (1<<i);
                    dp[nextMask]=max(dp[nextMask],dp[mask]+1LL*score[i]*position);
                    
                }
            }
        }

        
        return dp[full-1]%(int)(1e9+7);
    }
};
