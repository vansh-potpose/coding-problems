/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    int getLength(ListNode* head) {
        int len = 0;
        while (head) {
            len++;
            head = head->next;
        }
        return len;
    }

    int addNodes(ListNode* l1, ListNode* l2) {
        if (!l1) return 0;  
        int carry = addNodes(l1->next, l2->next);
        
        int sum = l1->val + l2->val + carry;
        l1->val = sum % 10;  
        return sum / 10;     
    }

    int propagateCarry(ListNode* l1, ListNode* end, int carry) {
        if (l1 == end) return carry;  
        
        carry = propagateCarry(l1->next, end, carry);
        
        int sum = l1->val + carry;
        l1->val = sum % 10;
        return sum / 10;  
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int len1 = getLength(l1);
        int len2 = getLength(l2);
        
        if (len1 < len2) {
            swap(l1, l2);
            swap(len1, len2);
        }
        
        ListNode* temp1 = l1;  
        int diff = len1 - len2;
        ListNode* cursor = l1;
        while (diff--) cursor = cursor->next;

        int carry = addNodes(cursor, l2);

        carry = propagateCarry(temp1, cursor, carry);

        if (carry) {
            ListNode* newHead = new ListNode(carry);
            newHead->next = temp1;
            temp1 = newHead;
        }

        return temp1;
    }
};

